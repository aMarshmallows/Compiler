void print_stack(int PC, int BP, int SP, int GP, int *pas, int *bars)
{
int i;
printf("%d\t%d\t%d\t", PC, BP, SP);
for (i = GP; i <= SP; i++)
{
if (bars[i] == 1)
printf("| %d ", pas[i]);
else
printf("%d ", pas[i]);
}
printf("\n");
}

void print_instruction(int PC, instruction IR)
{
char opname[4];
switch (IR.op)
{
case LIT : strcpy(opname, "LIT"); break;
case OPR :
switch (IR.m)
{
case RTN : strcpy(opname, "RTN"); break;
case ADD : strcpy(opname, "ADD"); break;
case SUB : strcpy(opname, "SUB"); break;
case MUL : strcpy(opname, "MUL"); break;
case DIV : strcpy(opname, "DIV"); break;
case EQL : strcpy(opname, "EQL"); break;
case NEQ : strcpy(opname, "NEQ"); break;
case LSS : strcpy(opname, "LSS"); break;
case LEQ : strcpy(opname, "LEQ"); break;
case GTR : strcpy(opname, "GTR"); break;
case GEQ : strcpy(opname, "GEQ"); break;
default : strcpy(opname, "err"); break;
}
break;
case LOD : strcpy(opname, "LOD"); break;
case STO : strcpy(opname, "STO"); break;
case CAL : strcpy(opname, "CAL"); break;
case INC : strcpy(opname, "INC"); break;
case JMP : strcpy(opname, "JMP"); break;
case JPC : strcpy(opname, "JPC"); break;
case SYS : 
switch (IR.m)
{
case WRT : strcpy(opname, "WRT"); break;
case RED : strcpy(opname, "RED"); break;
case HLT : strcpy(opname, "HLT"); break;
default : strcpy(opname, "err"); break;
}
break;
default : strcpy(opname, "err"); break;
}
printf("%d\t%s\t%d\t%d\t", (PC - 3)/3, opname, IR.l, IR.m);
}
